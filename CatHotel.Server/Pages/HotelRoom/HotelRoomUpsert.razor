@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"

@using CatHotel.Server.Helpers
@using Microsoft.Extensions.Logging

@inject IHotelRoomRepository _hotelRoomRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject ILogger _logger
@inject IFileUpload _fileUpload


<div class="bs-component">
    <div class="card border-dark mb-3">
        <div class="card-header">@Title</div>
        <div class="card-body">
            <EditForm Model="HotelRoomModel" style="margin-top: -1em;" OnValidSubmit="HandleHotelRoomUpsert">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label class="col-form-label" for="inputName">Name</label>
                    <InputText class="form-control" id="inputName" placeholder="Name" @bind-Value="HotelRoomModel.Name" />
                    <ValidationMessage For="() => HotelRoomModel.Name" />
                </div>
                <div class="form-group">
                    <label class="col-form-label" for="inputOccupancy">Occupancy</label>
                    <InputNumber class="form-control" id="inputOccupancy" placeholder="Occupancy" @bind-Value="HotelRoomModel.Occupancy" />
                    <ValidationMessage For="() => HotelRoomModel.Occupancy" />
                </div>
                <div class="form-group">
                    <label class="col-form-label" for="inputRate">Rate</label>
                    <InputNumber class="form-control" id="inputRate" placeholder="Rate" @bind-Value="HotelRoomModel.RegularRate" />
                    <ValidationMessage For="() => HotelRoomModel.RegularRate" />
                </div>
                <div class="form-group">
                    <label class="col-form-label" for="inputSqM">Sq M</label>
                    <InputText class="form-control" id="inputSqM" placeholder="Sq M" @bind-Value="HotelRoomModel.SqM" />
                    <ValidationMessage For="() => HotelRoomModel.SqM" />
                </div>
                <div class="form-group">
                    <label class="col-form-label" for="inputDetails">Details</label>
                    <InputTextArea class="form-control" id="inputDetails" placeholder="Details" @bind-Value="HotelRoomModel.Details"></InputTextArea>
                    <ValidationMessage For="() => HotelRoomModel.Details" />
                </div>
                <div class="form-group mt-3">
                    <InputFile OnChange="HandleImageUpload" multipe></InputFile>
                </div>
                <div class="d-flex mt-3 justify-content-end">
                    <a href="/hotel-room" class="btn btn-secondary d-flex align-items-center px-5 me-2">
                        <span class="oi oi-caret-left me-2" aria-hidden="true"></span>
                        <span>Cancel</span>
                    </a>
                    <button class="btn btn-primary d-flex align-items-center px-5">
                        <span class="oi oi-circle-check me-2" aria-hidden="true"></span>
                        <span>Save</span>
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDto HotelRoomModel { get; set; } = new HotelRoomDto();
    private string Title { get; set; } = "Create new hotel room";

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Update hotel room";
            HotelRoomModel = await _hotelRoomRepository.GetHotelRoomAsync(Id.Value);
        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDto();
        }
    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await _hotelRoomRepository.IsRoomUniqueAsync(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                await _jsRuntime.ToastrError("Room name already exists.");
                return;
            }
            if (HotelRoomModel.Id != 0 && Title == "Update hotel room")
            {
                /* UPDATE */
                var updateRoomResult = await _hotelRoomRepository.UpdateHotelRoomAsync(HotelRoomModel.Id, HotelRoomModel);
                await _jsRuntime.ToastrSuccess("Hotel room updated successfully.");
            }
            else
            {
                /* CREATE */
                var createdResult = await _hotelRoomRepository.CreateHotelRoomAsync(HotelRoomModel);
                await _jsRuntime.ToastrSuccess("Hotel room created successfully.");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
        }

        _navigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {

    }
}