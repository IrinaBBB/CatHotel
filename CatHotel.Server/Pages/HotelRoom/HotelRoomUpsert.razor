@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"

@using CatHotel.Server.Helpers
@using Microsoft.Extensions.Logging
@using Blazored.TextEditor

@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImagesRepository HotelImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ILogger _logger
@inject IFileUpload FileUpload


<div class="bs-component">
    <div class="card border-dark mb-3">
        <div class="card-header">@Title</div>
        <div class="card-body">
            <EditForm Model="HotelRoomModel" style="margin-top: -1em;" OnValidSubmit="HandleHotelRoomUpsert">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label class="col-form-label" for="inputName">Name</label>
                    <InputText class="form-control" id="inputName" placeholder="Name" @bind-Value="HotelRoomModel.Name" />
                    <ValidationMessage For="() => HotelRoomModel.Name" />
                </div>
                <div class="form-group">
                    <label class="col-form-label" for="inputOccupancy">Occupancy</label>
                    <InputNumber class="form-control" id="inputOccupancy" placeholder="Occupancy" @bind-Value="HotelRoomModel.Occupancy" />
                    <ValidationMessage For="() => HotelRoomModel.Occupancy" />
                </div>
                <div class="form-group">
                    <label class="col-form-label" for="inputRate">Rate</label>
                    <InputNumber class="form-control" id="inputRate" placeholder="Rate" @bind-Value="HotelRoomModel.RegularRate" />
                    <ValidationMessage For="() => HotelRoomModel.RegularRate" />
                </div>
                <div class="form-group">
                    <label class="col-form-label" for="squareM">Sq M</label>
                    <InputText class="form-control" id="squareM" placeholder="Sq M" @bind-Value="HotelRoomModel.SqM" />
                    <ValidationMessage For="() => HotelRoomModel.SqM" />
                </div>
                <div class="form-group mt-1" style="height:100px;">
                        <label>Details</label>
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room detals">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>
                 </div>
                <div class="form-group mt-3" style="padding-top:70px;">
                    <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                    <div class="row">
                        @if (IsImageUploadProcessStarted)
                        {
                            <div class="col-md-12">
                                <span><i class="fa fa-spin fa-spinner"></i> Please wait.. Images are uploading...</span>
                            </div>
                        }
                        @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                        {
                            int serial = 1;
                            foreach (var roomImage in HotelRoomModel.ImageUrls)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="room-image" style="background: url('@roomImage') 50% 50%;">
                                        <span class="room-image-title">@serial</span>
                                    </div>

                                    <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                        Delete
                                    </button>
                                </div>
                                serial++;
                            }
                        }
                    </div>
                </div>
                <div class="d-flex mt-3 justify-content-end">
                    <a href="/hotel-room" class="btn btn-secondary d-flex align-items-center px-5 me-2">
                        <span class="oi oi-caret-left me-2" aria-hidden="true"></span>
                        <span>Cancel</span>
                    </a>
                    <button class="btn btn-primary d-flex align-items-center px-5">
                        <span class="oi oi-circle-check me-2" aria-hidden="true"></span>
                        <span>Save</span>
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDto HotelRoomModel { get; set; } = new HotelRoomDto();
    private string Title { get; set; } = "Create new hotel room";
    private HotelRoomImageDto RoomImage { get; set; } = new HotelRoomImageDto();
    private bool IsImageUploadProcessStarted { get; set; } = false;
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Update hotel room";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDto();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HotelRoomModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
                }
                loading = false;
            } catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }
    }

    private async Task HandleHotelRoomUpsert()
    {
        var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
        if (roomDetailsByName != null)
        {
            await JsRuntime.ToastrError("Room name already exists.");
            return;
        }
        if (HotelRoomModel.Id != 0 && Title == "Update hotel room")
        {
            /* UPDATE */
            HotelRoomModel.Details = await QuillHtml.GetHTML();
            var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
            if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()) || (DeletedImageNames != null && DeletedImageNames.Any()))
            {
                if (DeletedImageNames != null && DeletedImageNames.Any())
                {
                    foreach (var deletedImageName in DeletedImageNames)
                    {
                        var imageName = deletedImageName.Replace($"RoomImages/", "");

                        var result = FileUpload.DeleteFile(imageName);
                        await HotelImagesRepository.DeleteHotelImageByImageUrl(deletedImageName);
                    }
                }
                await AddHotelRoomImage(updateRoomResult);
            }
            await JsRuntime.ToastrSuccess("Hotel room updated successfully.");
        }
        else
        {
            /* CREATE */
            HotelRoomModel.Details = await QuillHtml.GetHTML();
            var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
            await AddHotelRoomImage(createdResult);
            await JsRuntime.ToastrSuccess("Hotel room created successfully.");
        }
        NavigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg" || 
                        fileInfo.Extension.ToLower() == ".webp")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    } else
                    {
                        await JsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    } else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                } else
                {
                    await JsRuntime.ToastrError("Image uploading failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        } catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }

    private async Task AddHotelRoomImage(HotelRoomDto roomDetails)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages
                .Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {

                RoomImage = new HotelRoomImageDto()
                    {
                        RoomId = roomDetails.Id,
                        RoomImageUrl = imageUrl
                    };
                await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
            }
        }
    }

    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
            if (HotelRoomModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            } else
            {
                //update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
            
        } catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }
}
